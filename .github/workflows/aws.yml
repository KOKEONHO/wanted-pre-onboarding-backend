name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: wanted-pre-onboarding-ecr
  ECS_SERVICE: wanted-pre-onboarding
  ECS_CLUSTER: wanted-pre-onboarding
  ECS_TASK_DEFINITION: wanted-pre-onboarding-task-definition
  CONTAINER_NAME: was-container


permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Buildx
        run: |
          docker buildx create --use

      - name: Cache JDK
        uses: actions/cache@v3
        with:
          path: ~/.sdkman/candidates/java
          key: jdk-${{ runner.os }}-${{ hashFiles('**/*.java') }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              ${{ runner.os }}-gradle-

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build with Gradle
        run: |
          cd ${{ github.workspace }}
          chmod +x gradlew
          ./gradlew clean build -Dspring.profiles.active=prod -Djasypt.encryptor.password=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}        

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_ID=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          LATEST_IMAGE_ID=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          docker buildx build --platform linux/amd64 -t $IMAGE_ID -f ${{ github.workspace }}/Dockerfile .
          docker tag $IMAGE_ID $LATEST_IMAGE_ID
          docker push $IMAGE_ID
          docker push $LATEST_IMAGE_ID
          echo "::set-output name=image::$IMAGE_ID"

      - name: Get latest ECS task definition
        id: get-latest-task-def
        run: |
          TASK_DEF=$(aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} --query "services[0].taskDefinition" --output text)
          aws ecs describe-task-definition --task-definition $TASK_DEF --region ${AWS_REGION} --query "taskDefinition" --output json > task-definition.json
          echo "TASK_DEF_JSON=$(pwd)/task-definition.json" >> $GITHUB_ENV

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
